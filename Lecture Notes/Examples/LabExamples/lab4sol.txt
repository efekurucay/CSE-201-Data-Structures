import java.util.Random;

public class RecursiveLab {
    public static void main(String args[]) {
        RecursiveLab lab = new RecursiveLab();
        lab.runRecursions();
    }
    public static String toString(char[] a) {
        String string = new String(a);
        return string;
    }
    public static void BinaryStringCons (int k) {
        System.out.println("k: " + k + "\n");
        if (k <= 0) {
            return;
        }
        char[] ch = new char[k];
       ch[0] = '0';
       generate(k, ch, 1);
       ch[0] = '1';
       generate(k, ch, 1);
        
    }
    public static void generate(int k, char[] ch, int n) {
        
        if (n == k) {
            System.out.print(toString(ch)+", ");
            return;
        }
        if (ch[n - 1] == '0') {
            ch[n] = '0';
            generate(k, ch, n + 1);
            ch[n] = '1';
            generate(k, ch, n + 1);
        }
        if (ch[n - 1] == '1') {
            ch[n] = '0';
            generate(k, ch, n + 1);
 
        }
    }
     static void combinationUtil(int arr[], int data[], int start,
                                int end, int index, int r)
    {
        if (index == r)
        {
            for (int j=0; j<r; j++)
                System.out.print(data[j]+" ");
            System.out.println("");
            return;
        }
        for (int i=start; i<=end && end-i+1 >= r-index; i++)
        {
            
            data[index] = arr[i];
            combinationUtil(arr, data, i+1, end, index+1, r);
        }
    }
    static void ArrayCombination(int arr[], int r)
    {
        // A temporary array to store all combination one by one
        int data[]=new int[r];
        int n = arr.length;
        combinationUtil(arr, data, 0, n-1, 0, r);
    }

    public static void CharOccur (String str, char x) {
        System.out.println(Occur(str, x, 0));
    }
    
    public static int Occur(String str, char x, int idx){
        if(idx > str.length())
            return -1;
        else if (str.charAt(idx) == x)
            return idx;
        idx++;
        return Occur(str, x, idx);
    }

    public static void runRecursions () {
        
        Random random = new Random();
        // Perform recursions here
        BinaryStringCons(3);
        //BinaryStringCons(10);
        //BinaryStringCons(100); = 
        System.out.println("\nArray combinations:");
        int arr[] = {1, 3, 5, 4};
        ArrayCombination(arr, 3);
        // Measure and compare the time taken for the recursion algorithms for different input sizes
        System.out.println("\nCharacter Occurrence");
        CharOccur("DataStructureRecursion", 't');
        CharOccur("DataStructuresRecursion", 'R');
    }
}

